SLIP1Q1 --->

/*
	Write a program in GO language to accept user choice and print answers using arithmetic operators
*/
package main

import "fmt"

func main(){
	var ch string
	var a,b int

	fmt.Printf("Enter 1st no:")
	fmt.Scanf("%d\n",&a)

	fmt.Printf("Enter 1st no:")
	fmt.Scanf("%d\n",&b)

	fmt.Printf("+.Addition \n -.Subtraction \n *.Multiplication \n /.Division \n ")
	fmt.Printf("Enter your choice: ")
	fmt.Scanf("%s",&ch)

	switch ch {
		case "+": fmt.Println("Addition is " ,a+b)
		case "-": fmt.Println("Subtraction is " ,a-b)
		case "*": fmt.Println("Multiplication is " ,a*b)
		case "/": fmt.Println("Division is " ,a/b)
		default:  fmt.Println("INVALID CHOICE!!!!!")
	}
}

SLIP2Q1 --->

/*
	Write a program in GO language to print file information
*/
package main
import (
	"fmt"
	"os"
	"log"
)

func readFileInfo(filename string){
	fileInfo , err := os.Stat(filename)
	if err != nil {
		log.Fatal(err)
	}
		fmt.Println("File name: ",fileInfo.Name())
		fmt.Println("File Size: ",fileInfo.Size())
		fmt.Println("Permission: ",fileInfo.Mode())
		fmt.Println("Last Modified: ",fileInfo.ModTime())
		fmt.Println("Is Directory? : ",fileInfo.IsDir())
	
}
func main(){
	filename:="abc.txt"
	readFileInfo(filename)
}

SLIP3Q1 --->

/*
	Write a Program in GO language to accept n records of employee
information (eno,ename,salary) and display record of employees
having maximum salary.
*/

package main
import "fmt"

type Employee struct{
	eid int
	ename string
	sal float64
}
func main(){
	var n int
	fmt.Printf("Enter a no of employess: ")
	fmt.Scanf("%d\n",&n)

	emp := make([]Employee, n)

	for i:=0;i<n;i++{
		fmt.Printf("\nEnter details for %d employee: \n",i+1)

		fmt.Printf("\nEnter Employee Id: ")
		fmt.Scanf("%d\n",&emp[i].eid)
		fmt.Printf("\nEnter Employee Name: ")
		fmt.Scanf("%s\n",&emp[i].ename)
		fmt.Printf("\nEnter EMployee Salary: ")
		fmt.Scanf("%f\n",&emp[i].sal)
	}

	var temp Employee
	for i:=0;i<n;i++{
		for j:=0;j<i;j++{
			if emp[i].sal > emp[j].sal{
				temp=emp[i]
				emp[i]=emp[j]
				emp[j]=temp
			} 
		}
	}

	
			fmt.Printf("\nEmployee Id: %d",emp[0].eid)
			fmt.Printf("\nEmployee Name: %s",emp[0].ename)
			fmt.Printf("\nEMployee Salary: %f",emp[0].sal)
	
}

SLIP4Q1 --->

/*
	Write a program in GO language to sort array elements in ascending order.
*/

package main
import "fmt"

func sort(a []int){
	n := len(a)
	var temp int
	for i:=0;i<n;i++{
		for j:=0;j<i;j++{
			if a[i]<a[j]{
				temp=a[i]
				a[i]=a[j]
				a[j]=temp
			}
		}
	}
}
func main(){
	var n int
	fmt.Printf("Enter no of elements for an array: ")
	fmt.Scanf("%d\n",&n)

	a := make([]int,n)
	for i:=0;i<n;i++{
		fmt.Printf("Enter %d element : ",i+1)
		fmt.Scanf("%d\n",&a[i])
	}
	fmt.Println("Before sorting : ",a)

	sort(a)

	fmt.Println("After sorting : ",a)
}

SLIP5Q1 --->

/*
	Write a program in GO language to accept n records of employee
	information (eno,ename,salary) and display records of employees
	having minimum salary.
*/

package main
import "fmt"

type Employee struct{
	eid int
	ename string
	sal float64
}
func main(){
	var n int
	fmt.Printf("Enter no of employess: ")
	fmt.Scanf("%d\n",&n)

	emp := make([]Employee,n)

	for i:=0;i<n;i++{
		fmt.Printf("\nEnter %d employee detail: \n",i+1)
		fmt.Printf("\nEnter Employee Id: ")
		fmt.Scanf("%d\n",&emp[i].eid)
		fmt.Printf("\nEnter Employee Name: ")
		fmt.Scanf("%s\n",&emp[i].ename)
		fmt.Printf("\nEnter Employee Salary: ")
		fmt.Scanf("%f\n",&emp[i].sal)
	}

	var temp Employee
	for i:=0;i<n;i++{
	for j:=0;j<i;j++{
			if emp[i].sal < emp[j].sal {
				temp=emp[i]
				emp[i]=emp[j]
				emp[j]=temp
			}
		}
	}

	fmt.Printf("\nEmployee having minimum salary is: \n")
	fmt.Printf("\nEnter Employee Id: %d",emp[0].eid)
		fmt.Printf("\nEnter Employee Name: %s",emp[0].ename)
		fmt.Printf("\nEnter Employee Salary: %f",emp[0].sal)
}

SLIP6Q1 --->

/*
Write a program in GO language to accept two matrices and display its multiplication
*/
package main
import "fmt"

func main(){
	var r1,r2,c1,c2 int

	fmt.Printf("\nEnter dimensions for 1st matrix: ")
	fmt.Printf("\nEnter no of rows: ")
	fmt.Scanf("%d\n",&r1)
	fmt.Printf("\nEnter no of columns: ")
	fmt.Scanf("%d\n",&c1)

	fmt.Printf("\nEnter dimensions for 2nd matrix: ")
	fmt.Printf("\nEnter no of rows: ")
	fmt.Scanf("%d\n",&r2)
	fmt.Printf("\nEnter no of columns: ")
	fmt.Scanf("%d\n",&c2)

	if c1 != r2{
		fmt.Printf("Multiplication is not possible....")
		return
	}

	fmt.Println("Enter elements for 1st matrix: ")
	m1 := make([][]int,r1)
	for i := range m1 {
		m1[i] = make([]int,c1)
		for j:=0;j<c1;j++ {
			fmt.Scanf("%d\n",&m1[i][j])
		}
	} 

	fmt.Println("Enter elements of 2nd matrix:")
    m2 := make([][]int, r2)
    for i := range m2 {
        m2[i] = make([]int, c2)
        for j := 0; j < c2; j++ {
            fmt.Scanf("%d\n",&m2[i][j])
        }
    }

	 result := make([][]int,r1)
	 for i:= range result {
		result[i] = make([]int, c2)
		for j := 0; j<c2; j++ {
			for k := 0; k<c1 ; k++ {
				result[i][j] += m1[i][k] * m2[k][j] 
			}
		}
	 }

	 fmt.Printf("\nElements of 1st matrix is: \n")
	 for i:=0;i<r1;i++ {
		for j:=0;j<c2;j++ {
			fmt.Printf("%d\t",m1[i][j])
		}
		fmt.Println()
	 }

	 fmt.Printf("\nElements of 2nd matrix is: \n")
	 for i:=0;i<r1;i++ {
		for j:=0;j<c2;j++ {
			fmt.Printf("%d\t",m2[i][j])
		}
		fmt.Println()
	 }
	 fmt.Printf("\n*****Multiplication of matrix is***** \n")
	 for i:=0;i<r1;i++ {
		for j:=0;j<c2;j++ {
			fmt.Printf("%d\t",result[i][j])
		}
		fmt.Println()
	 }
}

SLIP7Q1 --->

/*
	Write a program in GO language to accept one matrix and display its transpose.

*/
package main

import "fmt"

func display(m [][]int) {
	for _, row := range m {
		for _, val := range row {
			fmt.Printf("%d\t", val)
		}
		fmt.Println()
	}
}
func transposeMatrix(m [][]int) [][]int {
    row := len(m)
    col := len(m[0])

    trans := make([][]int,col)
    for i := range trans {
        trans[i] = make([]int, row) 
    }

    for i:=0;i<row;i++ {
        for j:=0;j<col;j++ {
            trans[j][i] = m[i][j]
        }
    }
    return trans
} 

func main() {
	var row, col int
	fmt.Printf("\nEnter dimension for matrix: \n")

	fmt.Printf("\nEnter no of rows: ")
	fmt.Scanf("%d\n", &row)
	fmt.Printf("\nEnter no of rows: ")
	fmt.Scanf("%d\n", &col)

	fmt.Printf("\nEnter elements for matrix: \n")
	m := make([][]int, row)
	for i := range m {
		m[i] = make([]int, col)
		for j := 0; j < col; j++ {
			fmt.Scanf("%d\n", &m[i][j])
		}
	}

	fmt.Printf("Before transposing the matrix: \n")
	display(m)

	trans := transposeMatrix(m)
	fmt.Printf("After transposing the matrix: \n")
	display(trans)

}


SLIP8Q1 --->

/*
	Write a program in GO language to accept the book details such
	as Bookid, Title, Author, Price. Read and display the details of
	‘n’ number of books
*/

package main
import "fmt"

type Book struct{
	bid int
	title string
	aname string
	price float64
}

func main(){
	var n int
	fmt.Printf("\nEnter how many book details u want? ")
	fmt.Scanf("%d\n",&n)

	b := make([]Book,n)
	for i:=0;i<n;i++ {
		fmt.Printf("\nEnter book details: \n")

		fmt.Printf("\nEnter Book ID: ")
		fmt.Scanf("%d\n",&b[i].bid)

		fmt.Printf("\nEnter Title: ")
		fmt.Scanf("%s\n",&b[i].title)

		fmt.Printf("\nEnter Author Name: ")
		fmt.Scanf("%s\n",&b[i].aname)

		fmt.Printf("\nEnter Book Price: ")
		fmt.Scanf("%f\n",&b[i].price)
	}

	fmt.Printf("\nYour entered book details are: \n")
	for i:=0;i<n;i++ {
		fmt.Printf("\nBook ID: %d",b[i].bid)

		fmt.Printf("\nTitle: %s",b[i].title)

		fmt.Printf("\nAuthor Name: %s",b[i].aname)

		fmt.Printf("\nBook Price: %f\n\n",b[i].price)
	}
}

SLIP9Q1 --->

/*
	Write a program in GO language using a function to check whether the accepted number is palindrome or not.
*/

package main
import "fmt"

func isPallindrome(n int) bool {
	num := n
	rev := 0

	for n > 0 {
		rev = rev * 10 + n % 10
		n = n / 10
	}
	return rev == num
}
func main(){
	var n int
	fmt.Printf("Enter a number: ")
	fmt.Scanf("%d\n",&n)

	if isPallindrome(n){
		fmt.Println(n," is pallindrome")
	} else {
		fmt.Println(n," is not pallindrome")
	}
}

SLIP10Q1 --->

/*
	Write a program in GO language to read and write Fibonacci series to the using channel.
*/
package main
import "fmt"


func fibonacci(ch chan<- int, n int){
	first, second := 0,1
	for i:=0;i<n;i++ {
		ch <- first
		first, second = second, first + second
	}
	close(ch)
}

// Function to receive and print Fibonacci series from the channel
func fiboDisplay(ch <-chan int) {
	for i := range ch {
		fmt.Printf("%d\t",i)
	}
}

func main() {
	ch := make(chan int)

	var n int
	fmt.Printf("Enter how many elements u want in your fibonacci series ? \n")
	fmt.Scanf("%d\n",&n)

	go fibonacci(ch,n)

	fmt.Println("Fibonacci series is: ")
	fiboDisplay(ch)
}


SLIP10Q1 --->

/*
	Write a program in GO language to read and write Fibonacci series to the using channel.
*/
package main
import "fmt"


func fibonacci(ch chan<- int, n int){
	first, second := 0,1
	for i:=0;i<n;i++ {
		ch <- first
		first, second = second, first + second
	}
	close(ch)
}

// Function to receive and print Fibonacci series from the channel
func fiboDisplay(ch <-chan int) {
	for i := range ch {
		fmt.Printf("%d\t",i)
	}
}

func main() {
	ch := make(chan int)

	var n int
	fmt.Printf("Enter how many elements u want in your fibonacci series ? \n")
	fmt.Scanf("%d\n",&n)

	go fibonacci(ch,n)

	fmt.Println("Fibonacci series is: ")
	fiboDisplay(ch)
}


SLIP11Q1 --->

/*
	Write a program in GO language to check whether the accepted number is two digit or not
*/

package main
import "fmt"

func main(){
	var n int 
	fmt.Printf("\nEnter a number: ")
	fmt.Scanf("%d\n",&n)

	if n >= 10 && n <= 99 {
		fmt.Printf("\n%d is TWO digit number\n",n)
	} else {
		fmt.Printf("\n%d is not TWO digit number\n",n)
	}
}

SLIP12Q1 --->

/*
	Write a program in GO language to swap two numbers using call by reference concept
*/

package main
import "fmt"

func swap(a *int,b *int){
	var temp int
	temp=*a
	*a=*b
	*b=temp
}
func main(){
	var a,b int

	fmt.Printf("Enter a 1st number: ")
	fmt.Scanf("%d\n",&a)

	fmt.Printf("Enter a 2nd number: ")
	fmt.Scanf("%d\n",&b)

	fmt.Printf("Before swapping: a=%d \t b=%d",a,b)

	swap(&a,&b)

	fmt.Printf("\nAfter swapping: a=%d \t b=%d",a,b)
}

SLIP13Q1 --->

/*
	Write a program in GO language to print sum of all even and odd numbers separately between 1 to 100
*/

package main
import "fmt"

func main(){
	sumEven := 0
	sumOdd := 0

	for i:=1;i<=100;i++{
		if i%2==0{
			sumEven+=i
		}else {
			sumOdd+=i
		}
	}

	fmt.Println("Sum of even numbers from 1 to 100: ",sumEven)
	fmt.Println("Sum of odd numbers from 1 to 100: ",sumOdd)
}

SLIP14Q1 --->

/*
	Write a program in GO language using go routine and channel that
	will print the sum of the squares and cubes of the individual digits
	of a number. Example if number is 123 then
		squares = (1 * 1) + (2 * 2) + (3 * 3)
		cubes = (1 * 1 * 1) + (2 * 2 * 2) + (3 * 3 * 3).
*/

package main
import "fmt"

func squareCube(n int,sChan chan int,cChan chan int){
	sum1 := 0
	sum2 := 0
	for n>0 {
		rem := n%10
		sum1 += rem * rem
		sum2 += rem * rem * rem
		n=n/10
	}
	sChan <- sum1
	cChan <- sum2
} 
func main(){
	var n int
	fmt.Printf("Enter a number: ")
	fmt.Scanf("%d\n",&n)

	sChan := make(chan int)
	cChan := make(chan int)

	go squareCube(n,sChan,cChan)

	sum1 := <-sChan
	sum2 := <-cChan

	fmt.Println("Number is: ",n)
	fmt.Println("Sum of square of digits of a nummber: ",sum1)
	fmt.Println("Sum of cube of digits of a nummber: ",sum2)

}

SLIP15Q1 --->


/*
	Write a program in GO language to demonstrate function return
	multiple values.
*/
package main

import "fmt"

func addMul(a, b int) (int, float64) {
	add := a + b
	mul := a * b
	return add, float64(mul)
}
func main() {
	var a, b int
	fmt.Printf("Enter a number: ")
	fmt.Scanf("%d\n", &a)

	fmt.Printf("Enter a number: ")
	fmt.Scanf("%d\n", &b)

	add, mul := addMul(a, b)

	fmt.Println("Addition is : ", add)
	fmt.Println("Multiplication is : ",mul)
}


SLIP16Q1 -->

/*
	Write a program in GO language that prints out the numbers from 
	0 to 10, waiting between 0 and 250 ms after each one using the delay function.
*/

package main
import (
	"fmt"
	"math/rand"
	"time"
)

func delay(){
	duration := time.Duration(rand.Intn(251))*time.Millisecond
	time.Sleep(duration)
}

func main(){
	rand.Seed(time.Now().UnixNano())
	for i:=0;i<10;i++{
		fmt.Println("Delay: ",i)
		delay()
	}
}

SLIP17Q1 --->

/*
	Write a program in GO language to illustrate the concept of
	returning multiple values from a function. (Add, Subtract,Multiply, Divide)
*/

package main
import "fmt"

func multipleValues(a,b float64) (float64,float64,float64,float64){
	add := a+b
	sub := a-b
	mul := a*b
	var div float64
	if a>b {
		div = a/b
	}else {
		div = b/a
	}
	return add,sub,mul,div
	//return a+b , a-b, a*b, a/b
} 

func main(){
	var a, b float64
	fmt.Printf("Enter a number: ")
	fmt.Scanf("%f\n", &a)

	fmt.Printf("Enter a number: ")
	fmt.Scanf("%f\n", &b)

	add,sub,mul,div := multipleValues(a,b)

	fmt.Println("Addition: ",add)
	fmt.Println("Subtraction: ",sub)
	fmt.Println("Multiplication: ",mul)
	fmt.Println("Division: ",div)
}


SLIP18Q1 --->

/*
	Write a program in GO language to print a multiplication table ofnumber using function.
*/

package main

import "fmt"

func mul(n int) {
	for i := 1; i <= 10; i++ {
		fmt.Println(i,"*",n,"=",i*n)
	}
}
func main(){
	var n int
	fmt.Printf("Enter a number: ")
	fmt.Scanf("%d\n", &n)

	fmt.Println("Multiplication table of ",n)
	mul(n)
}

SLIP19Q1 --->

/*
	Write a program in GO language to illustrate the function returning multiple values (add, subtract).
*/

package main

import "fmt"

func multipleValues(a, b float64) (float64, float64) {
	add := a + b
	sub := a - b
	return add, sub
	//return a+b , a-b, a*b, a/b
}

func main() {
	var a, b float64
	fmt.Printf("Enter a number: ")
	fmt.Scanf("%f\n", &a)

	fmt.Printf("Enter a number: ")
	fmt.Scanf("%f\n", &b)

	add, sub := multipleValues(a, b)

	fmt.Println("Addition: ", add)
	fmt.Println("Subtraction: ", sub)
}



SLIP20Q1 --->

package main

import (
    "bufio"
    "fmt"
    "os"
)

func main() {
    // Open the file in append mode, creating it if it doesn't exist
    file, err := os.OpenFile("abc.txt", os.O_WRONLY|os.O_APPEND|os.O_CREATE, 0644)
    if err != nil {
        fmt.Println("Error opening file:", err)
        return
    }
    defer file.Close()

    // Prompt user for input to append
    fmt.Print("Enter text to append: ")
    scanner := bufio.NewScanner(os.Stdin)
    scanner.Scan()
    text := scanner.Text()

    // Write the input text to the file
    _, err = file.WriteString(text + "\n")
    if err != nil {
        fmt.Println("Error appending to file:", err)
        return
    }

    fmt.Println("Content appended successfully.")
}
